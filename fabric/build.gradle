plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    mods {
        main {
            sourceSet project(':common').sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${fabric_config_version}"
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}") { transitive = false }
    modImplementation("dev.emi:emi-fabric:${emi_version}")
    modImplementation("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
    modCompileOnly("com.blamejared.crafttweaker:CraftTweaker-fabric-${minecraft_version}:${crafttweaker_version}") {
        transitive = false
    }
    modLocalRuntime("com.blamejared.crafttweaker:CraftTweaker-fabric-${minecraft_version}:${crafttweaker_version}")
}

processResources {
    var replaceProperties = [
            minecraft_version: minecraft_version, min_emi_fabric_version: min_emi_fabric_version,
            min_fabric_loader_version: min_fabric_loader_version, neo_version_range: neo_version_range,
            min_fabric_api_version: min_fabric_api_version,
            mod_id: mod_id, mod_version: mod_version,
            min_jei_version: min_jei_version, min_crafttweaker_version: min_crafttweaker_version,
            min_mekanism_version: min_mekanism_version, min_fabric_config_version: min_fabric_config_version
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}